# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import paquete_pb2 as paquete__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in paquete_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PaqueteServicioStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegistrarPaquete = channel.unary_unary(
                '/paquete.PaqueteServicio/RegistrarPaquete',
                request_serializer=paquete__pb2.RegistrarPaqueteRequest.SerializeToString,
                response_deserializer=paquete__pb2.RegistrarPaqueteResponse.FromString,
                _registered_method=True)
        self.ActualizarEstadoPaquete = channel.unary_unary(
                '/paquete.PaqueteServicio/ActualizarEstadoPaquete',
                request_serializer=paquete__pb2.ActualizarEstadoPaqueteRequest.SerializeToString,
                response_deserializer=paquete__pb2.ActualizarEstadoPaqueteResponse.FromString,
                _registered_method=True)
        self.ListarPaquetesDisponibles = channel.unary_unary(
                '/paquete.PaqueteServicio/ListarPaquetesDisponibles',
                request_serializer=paquete__pb2.ListarPaquetesDisponiblesRequest.SerializeToString,
                response_deserializer=paquete__pb2.ListarPaquetesDisponiblesResponse.FromString,
                _registered_method=True)
        self.EliminarPaquete = channel.unary_unary(
                '/paquete.PaqueteServicio/EliminarPaquete',
                request_serializer=paquete__pb2.EliminarPaqueteRequest.SerializeToString,
                response_deserializer=paquete__pb2.EliminarPaqueteResponse.FromString,
                _registered_method=True)
        self.ObtenerPaquete = channel.unary_unary(
                '/paquete.PaqueteServicio/ObtenerPaquete',
                request_serializer=paquete__pb2.ObtenerPaqueteRequest.SerializeToString,
                response_deserializer=paquete__pb2.ObtenerPaqueteResponse.FromString,
                _registered_method=True)


class PaqueteServicioServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegistrarPaquete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActualizarEstadoPaquete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListarPaquetesDisponibles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EliminarPaquete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObtenerPaquete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaqueteServicioServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegistrarPaquete': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistrarPaquete,
                    request_deserializer=paquete__pb2.RegistrarPaqueteRequest.FromString,
                    response_serializer=paquete__pb2.RegistrarPaqueteResponse.SerializeToString,
            ),
            'ActualizarEstadoPaquete': grpc.unary_unary_rpc_method_handler(
                    servicer.ActualizarEstadoPaquete,
                    request_deserializer=paquete__pb2.ActualizarEstadoPaqueteRequest.FromString,
                    response_serializer=paquete__pb2.ActualizarEstadoPaqueteResponse.SerializeToString,
            ),
            'ListarPaquetesDisponibles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListarPaquetesDisponibles,
                    request_deserializer=paquete__pb2.ListarPaquetesDisponiblesRequest.FromString,
                    response_serializer=paquete__pb2.ListarPaquetesDisponiblesResponse.SerializeToString,
            ),
            'EliminarPaquete': grpc.unary_unary_rpc_method_handler(
                    servicer.EliminarPaquete,
                    request_deserializer=paquete__pb2.EliminarPaqueteRequest.FromString,
                    response_serializer=paquete__pb2.EliminarPaqueteResponse.SerializeToString,
            ),
            'ObtenerPaquete': grpc.unary_unary_rpc_method_handler(
                    servicer.ObtenerPaquete,
                    request_deserializer=paquete__pb2.ObtenerPaqueteRequest.FromString,
                    response_serializer=paquete__pb2.ObtenerPaqueteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'paquete.PaqueteServicio', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('paquete.PaqueteServicio', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PaqueteServicio(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegistrarPaquete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/paquete.PaqueteServicio/RegistrarPaquete',
            paquete__pb2.RegistrarPaqueteRequest.SerializeToString,
            paquete__pb2.RegistrarPaqueteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ActualizarEstadoPaquete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/paquete.PaqueteServicio/ActualizarEstadoPaquete',
            paquete__pb2.ActualizarEstadoPaqueteRequest.SerializeToString,
            paquete__pb2.ActualizarEstadoPaqueteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListarPaquetesDisponibles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/paquete.PaqueteServicio/ListarPaquetesDisponibles',
            paquete__pb2.ListarPaquetesDisponiblesRequest.SerializeToString,
            paquete__pb2.ListarPaquetesDisponiblesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EliminarPaquete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/paquete.PaqueteServicio/EliminarPaquete',
            paquete__pb2.EliminarPaqueteRequest.SerializeToString,
            paquete__pb2.EliminarPaqueteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ObtenerPaquete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/paquete.PaqueteServicio/ObtenerPaquete',
            paquete__pb2.ObtenerPaqueteRequest.SerializeToString,
            paquete__pb2.ObtenerPaqueteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
